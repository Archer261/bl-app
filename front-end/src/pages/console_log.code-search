# Query: console.log
# ContextLines: 1

31 results - 10 files

back-end\server.js:
  22          await mongoose.connect(process.env.MONGODB);
  23:         
  24      } catch (error) {

  30  mongoose.connection.on('disconnected', () => {
  31:     
  32  })
  33  mongoose.connection.on('connected', () => {
  34:     
  35  })

  38  app.get("/", (req, res) => {
  39:     
  40      res.send('you hit the endpoint');

  62      connect();
  63:     
  64  });

back-end\controllers\challengeController.js:
  39          res.status(500).json({ error: error.message });
  40:         
  41      }

back-end\controllers\weighInController.js:
  5  export const createWeighIn = async (req, res) => {
  6:     
  7      try {

front-end\vite.config.js:
  15            proxy.on('error', (err, _req, _res) => {
  16:             
  17            });
  18            proxy.on('proxyReq', (proxyReq, req, _res) => {
  19:             
  20            });
  21            proxy.on('proxyRes', (proxyRes, req, _res) => {
  22:             
  23            });

front-end\src\components\NotificationBell.jsx:
  14          // Perform any action you want when a notification is clicked
  15:         
  16      };

front-end\src\pages\Challenge.jsx:
  18      // const fetchParticipants = async (participantIds) => {
  19:     //     
  20      //     try {

  27      //         setParticipantData(participantsData);
  28:     //         
  29      //     } catch (error) {

  40                  //fetchParticipants(response.data.participants)
  41:                 
  42                  setLoading(false);

  63  
  64:     
  65      return (

front-end\src\pages\CreateChallenge.jsx:
  18          setWithSize(!withSize);
  19:         
  20      };

  32              setIsLoading(false);
  33:             
  34          } catch (error) {

  39      const handleUserSelection = (event) => {
  40:         
  41          const selectedUserId = event.target.value;
  42          const selectedUser = users.find(user => user._id === selectedUserId);
  43:         
  44          setSelectedUser(selectedUser);

  51          setParticipants([...participants, { _id: option._id, buyInStatus: false }])
  52:         
  53      };

  63                  // Handle successful login
  64:                 
  65              })

  73          if (e.target.value === 'on') {
  74:             
  75              setWithSize(true);

  78              setWithSize(false);
  79:             
  80          }
  81:         
  82:         
  83      }

front-end\src\pages\Home.jsx:
  15                  const response = await axios.get(`/api/challenge`);
  16:                 
  17                  const featuredChallenge = response.data.find(

  43  
  44:     
  45  

front-end\src\pages\Signup.jsx:
  57                  // if(response.data)
  58:                 
  59              })

  67          // Perform additional actions before sign-up
  68:         
  69      };

front-end\src\utils\AuthContext.jsx:
  13      const login = (response) => {
  14:         
  15          const { token, user } = response.data; // Assuming the token and user are present in the response data

  33  
  34:         
  35          const { token, user } = response.data;
